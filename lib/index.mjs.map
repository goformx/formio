{"version":3,"file":"index.mjs","sources":["../src/templates/goforms/builder/form.ts","../src/templates/goforms/builder/index.ts","../src/templates/goforms/builderComponent/form.ts","../src/templates/goforms/builderComponent/index.ts","../src/templates/goforms/builderComponents/form.ts","../src/templates/goforms/builderComponents/index.ts","../src/templates/goforms/builderEditForm/form.ts","../src/templates/goforms/builderEditForm/index.ts","../src/templates/goforms/builderPlaceholder/form.ts","../src/templates/goforms/builderPlaceholder/index.ts","../src/templates/goforms/builderSidebar/form.ts","../src/templates/goforms/builderSidebar/index.ts","../src/templates/goforms/builderSidebarGroup/form.ts","../src/templates/goforms/builderSidebarGroup/index.ts","../src/templates/goforms/builderWizard/form.ts","../src/templates/goforms/builderWizard/index.ts","../src/templates/goforms/button/form.ts","../src/templates/goforms/button/html.ts","../src/templates/goforms/button/index.ts","../src/templates/goforms/checkbox/form.ts","../src/templates/goforms/checkbox/html.ts","../src/templates/goforms/checkbox/index.ts","../src/templates/goforms/columns/form.ts","../src/templates/goforms/columns/index.ts","../src/templates/goforms/component/form.ts","../src/templates/goforms/component/index.ts","../src/templates/goforms/cssClasses.ts","../src/templates/goforms/datagrid/form.ts","../src/templates/goforms/datagrid/html.ts","../src/templates/goforms/datagrid/index.ts","../src/templates/goforms/day/form.ts","../src/templates/goforms/day/index.ts","../src/templates/goforms/editgrid/form.ts","../src/templates/goforms/editgrid/html.ts","../src/templates/goforms/editgrid/index.ts","../src/templates/goforms/field/form.ts","../src/templates/goforms/field/align.ts","../src/templates/goforms/field/index.ts","../src/templates/goforms/fieldset/form.ts","../src/templates/goforms/fieldset/index.ts","../src/templates/goforms/file/form.ts","../src/templates/goforms/file/index.ts","../src/templates/goforms/icon/form.ts","../src/templates/goforms/icon/index.ts","../src/templates/goforms/iconClass.ts","../src/templates/goforms/input/form.ts","../src/templates/goforms/input/html.ts","../src/templates/goforms/input/index.ts","../src/templates/goforms/label/form.ts","../src/templates/goforms/label/index.ts","../src/templates/goforms/loader/form.ts","../src/templates/goforms/loader/index.ts","../src/templates/goforms/loading/form.ts","../src/templates/goforms/loading/index.ts","../src/templates/goforms/message/form.ts","../src/templates/goforms/message/index.ts","../src/templates/goforms/multiValueRow/form.ts","../src/templates/goforms/multiValueRow/index.ts","../src/templates/goforms/multiValueTable/form.ts","../src/templates/goforms/multiValueTable/index.ts","../src/templates/goforms/panel/form.ts","../src/templates/goforms/panel/index.ts","../src/templates/goforms/radio/form.ts","../src/templates/goforms/radio/html.ts","../src/templates/goforms/radio/index.ts","../src/templates/goforms/resourceAdd/form.ts","../src/templates/goforms/resourceAdd/index.ts","../src/templates/goforms/select/form.ts","../src/templates/goforms/select/html.ts","../src/templates/goforms/select/index.ts","../src/templates/goforms/selectOption/form.ts","../src/templates/goforms/selectOption/html.ts","../src/templates/goforms/selectOption/index.ts","../src/templates/goforms/signature/form.ts","../src/templates/goforms/signature/html.ts","../src/templates/goforms/signature/index.ts","../src/templates/goforms/survey/form.ts","../src/templates/goforms/survey/html.ts","../src/templates/goforms/survey/index.ts","../src/templates/goforms/tab/form.ts","../src/templates/goforms/tab/flat.ts","../src/templates/goforms/tab/index.ts","../src/templates/goforms/table/form.ts","../src/templates/goforms/table/index.ts","../src/templates/goforms/tree/form.ts","../src/templates/goforms/tree/index.ts","../src/templates/goforms/tree/partials/edit.ts","../src/templates/goforms/tree/partials/view.ts","../src/templates/goforms/tree/partials/index.ts","../src/templates/goforms/webform/form.ts","../src/templates/goforms/webform/index.ts","../src/templates/goforms/well/form.ts","../src/templates/goforms/well/index.ts","../src/templates/goforms/wizard/form.ts","../src/templates/goforms/wizard/index.ts","../src/templates/goforms/wizardHeader/form.ts","../src/templates/goforms/wizardHeader/index.ts","../src/templates/goforms/wizardHeaderClassic/form.ts","../src/templates/goforms/wizardHeaderClassic/index.ts","../src/templates/goforms/wizardHeaderVertical/form.ts","../src/templates/goforms/wizardHeaderVertical/index.ts","../src/templates/goforms/wizardNav/form.ts","../src/templates/goforms/wizardNav/index.ts","../src/templates/goforms/alert/form.ts","../src/templates/goforms/alert/index.ts","../src/templates/goforms/errorsList/form.ts","../src/templates/goforms/errorsList/index.ts","../src/templates/goforms/index.ts","../src/components/CustomTextField.ts","../src/components/index.ts","../src/index.ts"],"sourcesContent":["import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => `\n<div class=\"formio builder ui grid formbuilder\">\n  <div class=\"four wide column formcomponents\">\n    ${ctx.sidebar}\n  </div>\n  <div class=\"twelve wide column formarea\" ref=\"form\">\n    ${ctx.form}\n  </div>\n</div>\n`;\n","import form from \"./form\";\nexport default { form };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  const iconClass = ctx.iconClass as (icon: string) => string;\n  const html = ctx.html as string;\n  return `<div class=\"builder-component\" ref=\"dragComponent\">\n    <div class=\"component-btn-group\" data-noattach=\"true\">\n      <div class=\"ui button mini icon primary component-settings-button-edit\" ref=\"editComponent\">\n        <i class=\"${iconClass(\"cog\")}\"></i>\n      </div>\n      <div class=\"ui button mini icon component-settings-button-copy\" ref=\"copyComponent\">\n        <i class=\"${iconClass(\"copy\")}\"></i>\n      </div>\n      <div class=\"ui button mini icon component-settings-button-paste\" ref=\"pasteComponent\">\n        <i class=\"${iconClass(\"save\")}\"></i>\n      </div>\n      <div class=\"ui button mini icon component-settings-button-edit-json\" ref=\"editJson\">\n        <i class=\"${iconClass(\"wrench\")}\"></i>\n      </div>\n      <div class=\"ui button mini icon component-settings-button-move\" ref=\"moveComponent\">\n        <i class=\"${iconClass(\"move\")}\"></i>\n      </div>\n      <div class=\"ui button mini icon secondary component-settings-button-remove\" ref=\"removeComponent\">\n        <i class=\"${iconClass(\"remove\")}\"></i>\n      </div>\n    </div>\n    ${html}\n  </div>`;\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (\n  ctx: TemplateContext,\n) => `<div class=\"builder-components drag-container ${ctx.type}\" ref=\"${ctx.key}-container\">\n  ${ctx.html}\n</div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\ninterface BuilderEditFormContext {\n  t: (key: string) => string;\n  componentInfo: {\n    title: string;\n    documentation?: string;\n    help?: string;\n  };\n  iconClass: (name: string) => string;\n  preview?: boolean;\n  editForm?: string;\n}\n\nexport default (ctx: BuilderEditFormContext) => `\n  <div class=\"formio-dialog formio-dialog-theme-default\">\n    <div class=\"formio-dialog-content\">\n      <div class=\"formio-dialog-content-header\">\n        <h3 class=\"lead\">${ctx.t(ctx.componentInfo.title)} ${ctx.t(\"Component\")}</h3>\n        ${ctx.componentInfo.documentation\n          ? `\n        <a href=\"${ctx.componentInfo.documentation}\" target=\"_blank\">\n          <i class=\"${ctx.iconClass(\"new-window\")}\"> ${ctx.t(\"Help\")}</i>\n        </a>\n        `\n          : \"\"}\n      </div>\n      <div class=\"formio-dialog-content-body\">\n        <div class=\"formio-component-edit-container\">\n          <div class=\"formio-component-edit-content\">\n            <div class=\"formio-component-edit-content-header\">\n              <div class=\"formio-component-edit-content-header-actions\">\n                <button class=\"ui button primary\" style=\"margin-right: 10px;\" ref=\"saveButton\">${ctx.t(\"Save\")}</button>\n                <button class=\"ui button default\" style=\"margin-right: 10px;\" ref=\"cancelButton\">${ctx.t(\"Cancel\")}</button>\n                <button class=\"ui button negative\" ref=\"removeButton\">${ctx.t(\"Remove\")}</button>\n              </div>\n            </div>\n            <div class=\"formio-component-edit-content-body\">\n              <div class=\"formio-component-edit-content-body-preview\">\n                <div class=\"formio-component-edit-content-body-preview-header\">\n                  ${ctx.t(\"Preview\")}\n                </div>\n                <div class=\"formio-component-edit-content-body-preview-content\">\n                  <div class=\"formio-component-edit-content-body-preview-content-help\">\n                    ${ctx.componentInfo.help\n                      ? `\n                    <div class=\"formio-component-edit-content-body-preview-content-help-content\">\n                      ${ctx.componentInfo.help}\n                    </div>\n                    `\n                      : \"\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"formio-dialog-content-footer\">\n        <div class=\"formio-dialog-content-footer-actions\">\n          <button class=\"ui button primary\" style=\"margin-right: 10px;\" ref=\"saveButton\">${ctx.t(\"Save\")}</button>\n          <button class=\"ui button default\" style=\"margin-right: 10px;\" ref=\"cancelButton\">${ctx.t(\"Cancel\")}</button>\n          <button class=\"ui button negative\" ref=\"removeButton\">${ctx.t(\"Remove\")}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => `<div\n  class=\"ui info message no-drag\"\n  style=\"text-align:center; margin-bottom: 5px;\"\n  role=\"alert\"\n  data-noattach=\"true\"\n  data-position=\"${ctx.position}\"\n>\n  Drag and Drop a form component\n</div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\ninterface BuilderSidebarContext {\n  t: (key: string) => string;\n  groups: string[];\n}\n\nexport default (ctx: BuilderSidebarContext) => `\n  <div class=\"formio-builder-sidebar\">\n    ${ctx.groups.map((group: string) => `${group}`).join(\"\")}\n  </div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  // Type assertions for known structure\n  const group = ctx.group as {\n    componentOrder: string[];\n    components: Record<\n      string,\n      { key: string; schema: { type: string }; icon?: string; title: string }\n    >;\n    title: string;\n    default?: boolean;\n  };\n  const t = ctx.t as (s: string) => string;\n  const iconClass = ctx.iconClass as (icon: string) => string;\n  const subgroups = ctx.subgroups as string[];\n\n  const components = group.componentOrder\n    .map((componentKey: string) => {\n      const component = group.components[componentKey];\n      return `<span\n      data-group=\"${ctx.groupKey}\"\n      data-key=\"${component.key}\"\n      data-type=\"${component.schema.type}\"\n      class=\"ui button mini primary fluid formcomponent drag-copy\"\n    >\n      ${component.icon ? `<i class=\"${iconClass(component.icon)}\" style=\"margin-right: 5px;\"></i>` : \"\"}\n      ${t(component.title)}\n    </span>`;\n    })\n    .join(\"\");\n\n  return `<div class=\"ui segment secondary form-builder-panel\" style=\"padding: 0\" ref=\"group-panel-${ctx.groupKey}\">\n    <div class=\"form-builder-group-header\">\n      <h5 class=\"panel-title\">\n        <button\n          class=\"ui button basic fluid builder-group-button\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#group-${ctx.groupKey}\"\n          data-parent=\"${ctx.groupId}\"\n          ref=\"sidebar-anchor\"\n        >\n          ${t(group.title)}\n        </button>\n      </h5>\n    </div>\n  </div>\n  <div class=\"ui segment\" style=\"padding: 0\">\n    <div\n      class=\"panel-collapse collapse ${group.default ? \" in\" : \"\"}\"\n      data-parent=\"#${ctx.groupId}\"\n      data-default=\"${group.default}\"\n      id=\"group-${ctx.groupKey}\"\n      ref=\"sidebar-group\"\n    >\n      <div id=\"group-container-${ctx.groupKey}\" class=\"card-body panel-body no-drop\" ref=\"sidebar-container\">\n        ${components}\n        ${subgroups.join(\"\")}\n      </div>\n    </div>\n  </div>`;\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  // Type assertions for known structure\n  const pages = ctx.pages as Array<{ title: string }>;\n  const self = ctx.self as { page: number };\n  const t = ctx.t as (s: string) => string;\n  const iconClass = ctx.iconClass as (icon: string) => string;\n  const sidebar = ctx.sidebar as string;\n  const form = ctx.form as string;\n\n  const pageBreadcrumbs = pages\n    .map(\n      (page, pageIndex: number) => `\n        <div title=\"${page.title}\" class=\"${pageIndex === self.page ? \"active section\" : \"section\"} wizard-page-label\" ref=\"gotoPage\">${page.title}</div>\n        <div class=\"divider\">/</div>\n      `,\n    )\n    .join(\"\");\n  return `<div class=\"formio builder ui grid formbuilder\">\n    <div class=\"four wide column formcomponents\">\n      ${sidebar}\n    </div>\n    <div class=\"twelve wide column formarea\">\n      <div class=\"ui breadcrumb\" style=\"margin-bottom: 0.5em\">\n        ${pageBreadcrumbs}\n        <div title=\"${t(\"Create Page\")}\" class=\"section wizard-page-label\" ref=\"addPage\"><i class=\"${iconClass(\"plus\")}\"></i> ${t(\"Page\")}</div>\n      </div>\n      <div ref=\"form\">\n        ${form}\n      </div>\n    </div>\n  </div>`;\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  // Type assertions for known structure\n  const input = ctx.input as {\n    type: string;\n    attr?: Record<string, string>;\n    content?: string;\n    labelClass?: string;\n  };\n  const component = ctx.component as {\n    theme?: string;\n    customClass?: string;\n    leftIcon?: string;\n    rightIcon?: string;\n    tooltip?: string;\n  };\n  const transform = ctx.transform as (type: string, value: unknown) => string;\n  const iconClass = ctx.iconClass as (icon: string) => string;\n\n  const attrs = Object.entries(input.attr || {})\n    .map(([attr, value]) => `${attr}=\"${value}\"`)\n    .join(\" \");\n  return `<${input.type}\n    ref=\"button\"\n    class=\"ui button ${transform(\"theme\", component.theme)} ${component.customClass || \"\"}\"\n    ${attrs}\n  >\n  ${component.leftIcon ? `<i class=\"${component.leftIcon}\"></i>&nbsp;` : \"\"}\n  ${input.content || \"\"}\n  ${component.tooltip ? `<i ref=\"tooltip\" class=\"${iconClass(\"question-sign\")}\" text-muted\" data-tooltip=\"${component.tooltip}\"></i>` : \"\"}\n  ${component.rightIcon ? `&nbsp;<i class=\"${component.rightIcon}\"></i>` : \"\"}\n  </${input.type}>\n  <div ref=\"buttonMessageContainer\">\n    <span class=\"help-block\" ref=\"buttonMessage\"></span>\n  </div>`;\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  // Type assertions for known structure\n  const input = ctx.input as {\n    type: string;\n    attr?: Record<string, string>;\n    content?: string;\n    labelClass?: string;\n    label?: string;\n  };\n  const component = ctx.component as { tooltip?: string };\n  const self = ctx.self as { labelIsHidden: () => boolean };\n  const iconClass = ctx.iconClass as (icon: string) => string;\n\n  const attrs = Object.entries(input.attr || {})\n    .map(([attr, value]) => `${attr}=\"${value}\"`)\n    .join(\" \");\n  return `<div class=\"ui checkbox\">\n    <${input.type}\n      ref=\"input\"\n      id=\"${ctx.id}\"\n      ${attrs}\n      ${ctx.checked ? \"checked=true\" : \"\"}\n    >\n    </${input.type}>\n    <label class=\"${input.labelClass || \"\"}\" for=\"${ctx.id}\">\n      ${input.content || \"\"}\n      ${!self.labelIsHidden() ? `<span>${input.label || \"\"}</span>` : \"\"}\n    </label>\n    ${component.tooltip ? `<i ref=\"tooltip\" class=\"${iconClass(\"question-sign\")} text-muted\" data-tooltip=\"${component.tooltip}\"></i>` : \"\"}\n  </div>`;\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","import { TemplateContext } from \"../types\";\n\ninterface ColumnsContext {\n  t: (key: string) => string;\n  component: {\n    columns: Array<{\n      width: number;\n      components: unknown[];\n    }>;\n  };\n  transform: (type: string, value: string | number) => string;\n  columnComponents: unknown[];\n  columnKey: string;\n}\n\nexport default (ctx: ColumnsContext) => `\n  <div class=\"formio-columns\">\n    ${ctx.component.columns\n      .map(\n        (column, index) => `\n      <div class=\"${ctx.transform(\"columns\", column.width)} wide column\" ref=\"${ctx.columnKey}\">\n        ${ctx.columnComponents[index]}\n      </div>\n    `,\n      )\n      .join(\"\")}\n  </div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  return `<div id=\"${ctx.id}\" class=\"field ${ctx.classes}\"${ctx.styles ? ` style=\"${ctx.styles}\"` : \"\"} ref=\"component\">\n    ${\n      ctx.visible\n        ? `\n    ${ctx.children}\n    <div ref=\"messageContainer\"></div>\n    `\n        : \"\"\n    }\n  </div>`;\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","export default {\n  \"has-error\": \"error\",\n  \"is-invalid\": \"error\",\n  \"formio-tab-panel-active\": \"active\",\n  \"formio-tab-link-active\": \"active\",\n  \"formio-tab-link-container-active\": \"active\",\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  // Type assertions for known structure\n  const component = ctx.component as {\n    layoutFixed?: boolean;\n    reorder?: boolean;\n    striped?: boolean;\n    bordered?: boolean;\n    hover?: boolean;\n    condensed?: boolean;\n    addAnother?: string;\n  };\n  const columns = ctx.columns as Array<{\n    validate?: { required?: boolean };\n    hideLabel?: boolean;\n    label?: string;\n    title?: string;\n    tooltip?: string;\n  }>;\n  const rows = ctx.rows as unknown[];\n  const t = ctx.t as (s: string) => string;\n  const iconClass = ctx.iconClass as (icon: string) => string;\n  const datagridKey = ctx.datagridKey as string;\n  const hasAddButton = !!ctx.hasAddButton;\n  const hasBottomSubmit = !!ctx.hasBottomSubmit;\n  const hasHeader = !!ctx.hasHeader;\n  const hasExtraColumn = !!ctx.hasExtraColumn;\n  const addButtonLocation = ctx.addButtonLocation as string;\n  const addButton = ctx.addButton as string;\n  const numColumns = Number(ctx.numColumns);\n\n  const tableStyle = component.layoutFixed\n    ? 'style=\"table-layout: fixed;\"'\n    : \"\";\n  const header = hasHeader\n    ? `\n    <thead>\n      <tr>\n        ${component.reorder ? \"<th></th>\" : \"\"}\n        ${columns\n          .map(\n            (col) => `\n          <th class=\"${col.validate && col.validate.required ? \"field-required\" : \"\"}\">\n            ${col.hideLabel ? \"\" : t(col.label || col.title || \"\")}\n            ${col.tooltip ? ` <i ref=\"tooltip\" data-title=\"${col.tooltip}\" class=\"${iconClass(\"question-sign\")} text-muted\" data-tooltip=\"${col.tooltip}\"></i>` : \"\"}\n          </th>\n        `,\n          )\n          .join(\"\")}\n        ${\n          hasExtraColumn\n            ? `<th>\n          ${hasAddButton && addButtonLocation === \"header\" ? addButton : \"\"}\n        </th>`\n            : \"\"\n        }\n      </tr>\n    </thead>\n  `\n    : \"\";\n\n  const body = rows\n    .map(\n      (row) => `\n    <tr>${row}</tr>\n  `,\n    )\n    .join(\"\");\n\n  const footer =\n    hasAddButton && hasBottomSubmit\n      ? `\n    <tfoot>\n      <tr>\n        <td colspan=\"${numColumns + 1}\">\n          <button class=\"ui button primary\" ref=\"${datagridKey}-addRow\">\n            <i class=\"${iconClass(\"plus\")}\"></i> ${t(component.addAnother || \"Add Another\")}\n          </button>\n        </td>\n      </tr>\n    </tfoot>\n  `\n      : \"\";\n\n  return `<table class=\"ui table datagrid-table\n    ${component.striped ? \"striped\" : \"\"}\n    ${component.bordered ? \"celled\" : \"\"}\n    ${component.hover ? \"selectable\" : \"\"}\n    ${component.condensed ? \"compact\" : \"padded\"}\n    \" ${tableStyle}>\n    ${header}\n    <tbody ref=\"${datagridKey}-tbody\">\n      ${body}\n    </tbody>\n    ${footer}\n  </table>`;\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  const component = ctx.component as { key: string };\n  const t = ctx.t as (s: string) => string;\n  return `<div class=\"ui grid\">\n    ${\n      ctx.dayFirst && ctx.showDay\n        ? `\n      <div class=\"four wide column\">\n        <label for=\"${component.key}-day\" class=\"\">${t(\"Day\")}</label>\n        ${ctx.day}\n      </div>\n    `\n        : \"\"\n    }\n    ${\n      ctx.showMonth\n        ? `\n      <div class=\"five wide column\">\n        <label for=\"${component.key}-month\" class=\"\">${t(\"Month\")}</label>\n        ${ctx.month}\n      </div>\n    `\n        : \"\"\n    }\n    ${\n      !ctx.dayFirst && ctx.showDay\n        ? `\n      <div class=\"four wide column\">\n        <label for=\"${component.key}-day\" class=\"\">${t(\"Day\")}</label>\n        ${ctx.day}\n      </div>\n    `\n        : \"\"\n    }\n    ${\n      ctx.showYear\n        ? `\n      <div class=\"seven wide column\">\n        <label for=\"${component.key}-year\" class=\"\">${t(\"Year\")}</label>\n        ${ctx.year}\n      </div>\n    `\n        : \"\"\n    }\n  </div>`;\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\ninterface EditGridContext {\n  t: (key: string) => string;\n  errors: Record<number, string>;\n  ref: {\n    addRow: () => void;\n    removeRow: (index: number) => void;\n  };\n  openRows: Record<number, boolean>;\n  readOnly: boolean;\n  component: {\n    label: string;\n    key: string;\n  };\n  rows: Array<{\n    index: number;\n    data: Record<string, unknown>;\n  }>;\n  header: string;\n  preview: string;\n  iconClass: (name: string) => string;\n  addAnother: string;\n  footer: string;\n}\n\nexport default (ctx: EditGridContext) => `\n  <div class=\"formio-editgrid\">\n    <div class=\"formio-editgrid-header\">\n      ${ctx.header}\n    </div>\n    <div class=\"formio-editgrid-body\">\n      ${ctx.rows.map((row, index) => `\n        <div class=\"formio-editgrid-row\">\n          <div class=\"formio-editgrid-row-header\">\n            <div class=\"formio-editgrid-row-title\">\n              ${ctx.t(\"Row\")} ${index + 1}\n            </div>\n            <div class=\"formio-editgrid-row-actions\">\n              ${!ctx.readOnly ? `\n                <button class=\"ui button\" onclick=\"event.preventDefault(); ${ctx.ref.removeRow(index)}\">\n                  <i class=\"${ctx.iconClass(\"remove\")}\"></i>\n                </button>\n              ` : \"\"}\n            </div>\n          </div>\n          <div class=\"formio-editgrid-row-content\">\n            ${ctx.preview}\n          </div>\n          ${ctx.errors[index] ? `\n            <div class=\"formio-editgrid-row-error\">\n              ${ctx.errors[index]}\n            </div>\n          ` : \"\"}\n        </div>\n      `).join(\"\")}\n    </div>\n    <div class=\"formio-editgrid-footer\">\n      ${!ctx.readOnly ? `\n        <button class=\"ui button primary\" onclick=\"event.preventDefault(); ${ctx.ref.addRow()}\">\n          <i class=\"${ctx.iconClass(\"plus\")}\"></i> ${ctx.addAnother}\n        </button>\n      ` : \"\"}\n      ${ctx.footer}\n    </div>\n  </div>\n`;\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nimport align from \"./align\";\n\nexport default { form: value, align };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (ctx: TemplateContext) => {\n  const icon = ctx.icon as string;\n  const iconClass = ctx.iconClass as (icon: string) => string;\n  return `<i class=\"${iconClass(icon)}\"></i>`;\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","export default (iconset: string, name: string, spinning?: boolean): string => {\n  const icons: Record<string, string> = {\n    \"plus-squre-o\": \"plus square outline\",\n    \"minus-squre-o\": \"minus square outline\",\n    \"question-sign\": \"question circle\",\n    \"remove-circle\": \"trash alternate outline\",\n    \"new-window\": \"external alternate\",\n    \"files-o\": \"file outline\",\n    move: \"arrows alternate\",\n    link: \"linkify\",\n  };\n  if (Object.prototype.hasOwnProperty.call(icons, name)) {\n    name = icons[name];\n  }\n  name = name || \"\";\n  name = name.replace(/-/g, \" \");\n  name = name.replace(/ o$/, \" outline\");\n  return spinning ? `icon ${name} loading` : `icon ${name}`;\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default function (_ctx: TemplateContext) {\n  return `<div class=\"formio-loader\">\n    <div class=\"loader-wrapper\">\n      <div class=\"ui active centered inline loader\"></div>\n    </div>\n  </div>\n  `;\n}\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default function (_ctx: TemplateContext) {\n  return \"\";\n}\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (\n  ctx: TemplateContext,\n) => `<div class=\"ui pointing red basic label ${ctx.level}\">\n  ${ctx.message}\n</div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","interface RadioFormContext {\n  inline?: boolean;\n  values: Array<{\n    label: string;\n    value: string;\n    selected?: boolean;\n  }>;\n  input: {\n    type: string;\n    attr: {\n      type?: string;\n    };\n  };\n}\n\nexport default (\n  ctx: RadioFormContext,\n) => `<div class=\"fields ${ctx.inline ? \"inline\" : \"grouped\"}\">\n  ${ctx.values\n    .map(\n      (item) => `\n    <div class=\"field\">\n      <div class=\"ui ${ctx.input.attr.type === \"radio\" ? \"radio\" : \"\"} checkbox\" ref=\"wrapper\">\n        <${ctx.input.type}\n          type=\"${ctx.input.attr.type || \"radio\"}\"\n          value=\"${item.value}\"\n          ${item.selected ? \"checked\" : \"\"}\n        />\n        <label>${item.label}</label>\n      </div>\n    </div>\n  `,\n    )\n    .join(\"\")}\n</div>`;\n","interface RadioHTMLContext {\n  values: Array<{\n    label: string;\n    value: string;\n  }>;\n  value: string | Record<string, boolean>;\n  t: (key: string) => string;\n}\n\nexport default (ctx: RadioHTMLContext) => `<div ref=\"value\">\n  ${ctx.values\n    .filter(\n      (item) =>\n        ctx.value === item.value ||\n        (typeof ctx.value === \"object\" &&\n          Object.prototype.hasOwnProperty.call(ctx.value, item.value) &&\n          ctx.value[item.value]),\n    )\n    .map((item) => ctx.t(item.label))\n    .join(\", \")}\n</div>`;\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","import { TemplateContext } from \"../types\";\n\nexport default function (ctx: TemplateContext) {\n  const t = ctx.t as (s: string) => string;\n  const iconClass = ctx.iconClass as (s: string) => string;\n  const component = ctx.component as { addResourceLabel?: string };\n  return `<table class=\"ui table celled\">\n    <tbody>\n      <tr>\n        <td>\n          ${ctx.element}\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">\n          <button class=\"ui button primary\" ref=\"addResource\">\n            <i class=\"${iconClass(\"plus\")}\"></i>\n            ${t(component.addResourceLabel || \"Add Resource\")}\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  `;\n}\n","import value from \"./form\";\n\nexport default { form: value };\n","interface SelectContext {\n  input: {\n    multiple?: boolean;\n    attr?: Record<string, string>;\n    ref?: string;\n  };\n  instance: {\n    id: string;\n  };\n  component: {\n    key: string;\n  };\n  options: string;\n}\n\nexport default (ctx: SelectContext) => `<select\n  ref=\"${ctx.input.ref || \"selectContainer\"}\"\n  class=\"ui search dropdown\"\n  ${ctx.input.multiple ? \"multiple\" : \"\"}\n  ${Object.entries(ctx.input.attr || {})\n    .map(([attr, value]) => `${attr}=\"${value}\"`)\n    .join(\" \")}\n  ${!ctx.input.attr?.id ? `id=\"${ctx.instance.id}-${ctx.component.key}\"` : \"\"}\n>${ctx.options}</select>\n<input type=\"text\"\n       class=\"formio-select-autocomplete-input\"\n       ref=\"autocompleteInput\"\n       ${ctx.input.attr?.autocomplete ? `autocomplete=\"${ctx.input.attr.autocomplete}\"` : \"\"}\n       tabindex=\"-1\"\n/>`;\n","interface SelectHTMLContext {\n  value: string | number | null;\n  self: {\n    itemValueForHTMLMode: (value: string | number) => string;\n  };\n}\n\nexport default (ctx: SelectHTMLContext) => `<div ref=\"value\">\n  ${ctx.value ? ctx.self.itemValueForHTMLMode(ctx.value) : \"-\"}\n</div>`;\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","interface SelectOptionContext {\n  selected?: boolean;\n  option: {\n    value: string;\n    label: string;\n  };\n  attrs?: Record<string, string>;\n}\n\nexport default (\n  ctx: SelectOptionContext,\n) => `<option ${ctx.selected ? 'selected=\"selected\"' : \"\"}\n  value='${ctx.option.value}'\n  ${Object.entries(ctx.attrs || {})\n    .map(([attr, value]) => `${attr}=\"${value}\"`)\n    .join(\" \")}>\n  ${ctx.option.label}\n</option>`;\n","interface SelectOptionHTMLContext {\n  selected?: boolean;\n  option: {\n    label: string;\n  };\n  t: (key: string) => string;\n}\n\nexport default (ctx: SelectOptionHTMLContext) => `\n  ${ctx.selected ? ctx.t(ctx.option.label) : \"\"}\n`;\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","interface SignatureFormContext {\n  element: string;\n  required?: boolean;\n  component: {\n    width: string;\n    height: number;\n    tabindex?: number;\n    footer?: string;\n  };\n  iconClass: (icon: string) => string;\n  t: (key: string) => string;\n}\n\nexport default (ctx: SignatureFormContext) => `${ctx.element}\n<div\n  class=\"signature-pad-body\"\n  style=\"width: ${ctx.component.width};height: ${ctx.component.height};padding:0;margin:0;\"\n  tabindex=\"${ctx.component.tabindex || 0}\"\n  ref=\"padBody\"\n>\n  <a class=\"ui basic button mini icon signature-pad-refresh\" ref=\"refresh\">\n    <i class=\"${ctx.iconClass(\"refresh\")}\"></i>\n  </a>\n  <canvas class=\"signature-pad-canvas\" height=\"${ctx.component.height}\" ref=\"canvas\"></canvas>\n  ${\n    ctx.required\n      ? `\n    <span class=\"form-control-feedback field-required-inline text-danger\">\n      <i class=\"${ctx.iconClass(\"asterisk\")}\"></i>\n    </span>\n  `\n      : \"\"\n  }\n  <img style=\"width: 100%;display: none;\" ref=\"signatureImage\">\n</div>\n${\n  ctx.component.footer\n    ? `\n  <div class=\"signature-pad-footer\">\n    ${ctx.t(ctx.component.footer)}\n  </div>\n`\n    : \"\"\n}`;\n","export default (\n  ctx: Record<string, any>,\n) => `<img style=\"width: 100%;\" ref=\"signatureImage\">\n`;\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","interface SurveyFormContext {\n  component: {\n    values: Array<{\n      label: string;\n      value: string;\n    }>;\n    questions: Array<{\n      label: string;\n      value: string;\n    }>;\n  };\n  self: {\n    getInputName: (question: { value: string }) => string;\n  };\n  key: string;\n  t: (key: string) => string;\n}\n\nexport default (\n  ctx: SurveyFormContext,\n) => `<table class=\"ui table striped celled\">\n  <thead>\n    <tr>\n      <th></th>\n      ${ctx.component.values\n        .map(\n          (value) => `\n      <th style=\"text-align: center;\">${ctx.t(value.label)}</th>\n      `,\n        )\n        .join(\"\")}\n    </tr>\n  </thead>\n  <tbody>\n    ${ctx.component.questions\n      .map(\n        (question) => `\n    <tr>\n      <td>${ctx.t(question.label)}</td>\n      ${ctx.component.values\n        .map(\n          (value) => `\n      <td style=\"text-align: center;\">\n        <input type=\"radio\" name=\"${ctx.self.getInputName(question)}\" value=\"${value.value}\" id=\"${ctx.key}-${question.value}-${value.value}\" ref=\"input\">\n      </td>\n      `,\n        )\n        .join(\"\")}\n    </tr>\n    `,\n      )\n      .join(\"\")}\n  </tbody>\n</table>`;\n","interface SurveyHTMLContext {\n  component: {\n    questions: Array<{\n      label: string;\n    }>;\n    values: Array<{\n      label: string;\n    }>;\n  };\n  t: (key: string) => string;\n}\n\nexport default (ctx: SurveyHTMLContext) => `\n  <table class=\"ui table\">\n    <thead>\n      <tr>\n        <th></th>\n        ${ctx.component.values\n          .map(\n            (value) => `\n        <th style=\"text-align: center;\">${ctx.t(value.label)}</th>\n        `,\n          )\n          .join(\"\")}\n      </tr>\n    </thead>\n    <tbody>\n      ${ctx.component.questions\n        .map(\n          (question) => `\n      <tr>\n        <th>${ctx.t(question.label)}</th>\n        <td>\n          ${ctx.component.values\n            .map(\n              (item) => `\n          <div class=\"ui radio checkbox\">\n            <input type=\"radio\" name=\"${question.label}\" value=\"${item.label}\" />\n            <label>${ctx.t(item.label)}</label>\n          </div>\n          `,\n            )\n            .join(\"\")}\n        </td>\n      </tr>\n      `,\n        )\n        .join(\"\")}\n    </tbody>\n  </table>\n`;\n","import value from \"./form\";\nimport html from \"./html\";\n\nexport default { form: value, html };\n","interface TabFormContext {\n  component: {\n    verticalLayout?: boolean;\n    components: Array<{\n      label: string;\n    }>;\n  };\n  currentTab: number;\n  tabLinkKey: string;\n  tabKey: string;\n  tabComponents: string[];\n  t: (key: string) => string;\n}\n\nexport default (ctx: TabFormContext) => `<div class=\"tab-container${ctx.component.verticalLayout ? ' card-vertical' : ''}\">\n  <div class=\"ui top attached tabular menu${ctx.component.verticalLayout ? ' nav-tabs-vertical' : ''}\">\n    ${ctx.component.components\n      .map(\n        (tab, index) => `\n    <a class=\"item${ctx.currentTab === index ? ' active' : ''}\" role=\"presentation\" ref=\"${ctx.tabLinkKey}\">${ctx.t(tab.label)}</a>\n    `,\n      )\n      .join(\"\")}\n  </div>\n  ${ctx.component.components\n    .map(\n      (tab, index) => `\n  <div role=\"tabpanel\" class=\"ui bottom attached tab segment${ctx.currentTab === index ? ' active' : ''}\" ref=\"${ctx.tabKey}\"\">${ctx.tabComponents[index]}</div>\n    `,\n    )\n    .join(\"\")}\n</div>\n`;\n","interface TabFlatContext {\n  component: {\n    components: Array<{\n      label: string;\n    }>;\n  };\n  tabComponents: string[];\n  t: (key: string) => string;\n}\n\nexport default (ctx: TabFlatContext) => `\n  ${ctx.component.components\n    .map(\n      (tab, index) => `\n    <h4 class=\"ui top attached block header\">${ctx.t(tab.label)}</h4>\n    <div class=\"ui bottom attached segment\">\n      ${ctx.tabComponents[index]}\n    </div>\n  `,\n    )\n    .join(\"\")}\n`;\n","import value from \"./form\";\nimport flat from \"./flat\";\n\nexport default { form: value, flat };\n","interface TableHeader {\n  label: string;\n  key: string;\n}\n\ninterface TableCell {\n  value: string;\n  className?: string;\n}\n\ninterface TableContext {\n  component: {\n    condensed?: boolean;\n    header?: TableHeader[];\n    striped?: boolean;\n    bordered?: boolean;\n    hover?: boolean;\n  };\n  rows: string;\n  tableComponents: TableCell[][];\n  t: (key: string) => string;\n}\n\nexport default (ctx: TableContext) => `<table class=\"ui table\n      ${ctx.component.striped ? \"striped\" : \"\"}\n      ${ctx.component.bordered ? \"celled\" : \"\"}\n      ${ctx.component.hover ? \"selectable\" : \"\"}\n      ${ctx.component.condensed ? \"compact\" : \"padded\"}\n    \">\n    ${\n      ctx.component.header && ctx.component.header.length > 0\n        ? `\n    <thead>\n      <tr>\n        ${ctx.component.header\n          .map((header: TableHeader) => `<th>${ctx.t(header.label)}</th>`)\n          .join(\"\")}\n      </tr>\n    </thead>\n    `\n        : \"\"\n    }\n    <tbody>\n      ${ctx.tableComponents\n        .map(\n          (row: TableCell[], rowIndex: number) => `\n        <tr>\n          ${row\n            .map(\n              (cell: TableCell, cellIndex: number) =>\n                `<td${cell.className ? ` class=\"${cell.className}\"` : \"\"}>${cell.value}</td>`,\n            )\n            .join(\"\")}\n        </tr>\n      `,\n        )\n        .join(\"\")}\n    </tbody>\n  </table>`;\n","import value from \"./form\";\n\nexport default { form: value };\n","interface TreeFormContext {\n  node: {\n    isRoot: boolean;\n  };\n  view: string;\n  content?: string;\n  childNodes?: string[];\n}\n\nexport default (ctx: TreeFormContext) => `\n  ${\n    ctx.node.isRoot\n      ? `\n    <div class=\"ui relaxed list\">\n      <div class=\"item\" ref=\"root\" role=\"listitem\">\n        ${ctx.view}\n      </div>\n    </div>\n  `\n      : `\n    <div ref=\"node\" class=\"item tree__level\" role=\"listitem\">\n      ${\n        ctx.content\n          ? `\n      <div ref=\"content\" class=\"tree__node-content content\">\n        ${ctx.content}\n      </div>\n      `\n          : \"\"\n      }\n      ${\n        ctx.childNodes && ctx.childNodes.length\n          ? `\n      <div ref=\"childNodes\" class=\"tree__node-children list\" role=\"list\">\n        ${ctx.childNodes.join(\"\")}\n      </div>\n      `\n          : \"\"\n      }\n    </div>\n  `\n  }\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","interface TreeEditContext {\n  readOnly?: boolean;\n  children: string;\n  t: (key: string) => string;\n}\n\nexport default (ctx: TreeEditContext) => `<div class=\"node-edit\">\n  <div ref=\"nodeEdit\">${ctx.children}</div>\n  ${\n    !ctx.readOnly\n      ? `\n    <div class=\"node-actions\">\n      <button ref=\"saveNode\" class=\"ui mini primary button saveNode\">${ctx.t(\"Save\")}</button>\n      <button ref=\"cancelNode\" class=\"ui mini button cancelNode\">${ctx.t(\"Cancel\")}</button>\n    </div>\n  `\n      : \"\"\n  }\n</div>`;\n","interface TreeViewContext {\n  values: Array<string | number>;\n  node: {\n    hasChildren: boolean;\n    collapsed: boolean;\n    revertAvailable: boolean;\n  };\n  readOnly: boolean;\n  t: (key: string) => string;\n}\n\nexport default (ctx: TreeViewContext) => `<div class=\"ui grid\">\n  <div class=\"row\">\n    ${ctx.values\n      .map(\n        (value) => `\n      <div class=\"two wide column\">\n        ${value}\n      </div>\n    `,\n      )\n      .join(\"\")}\n    <div class=\"five wide column\">\n      <div class=\"ui mini right floated buttons\">\n        ${\n          ctx.node.hasChildren\n            ? `\n          <button ref=\"toggleNode\" class=\"ui button toggleNode\">${ctx.t(ctx.node.collapsed ? \"Expand\" : \"Collapse\")}</button>\n          <div class=\"or\"></div>\n        `\n            : \"\"\n        }\n        ${\n          !ctx.readOnly\n            ? `\n          <button ref=\"addChild\" class=\"ui button primary addChild\">${ctx.t(\"Add\")}</button>\n          <div class=\"or\"></div>\n          <button ref=\"editNode\" class=\"ui button editNode\">${ctx.t(\"Edit\")}</button>\n          <div class=\"or\"></div>\n          <button ref=\"removeNode\" class=\"ui button negative removeNode\">${ctx.t(\"Delete\")}</button>\n          ${\n            ctx.node.revertAvailable\n              ? `\n            <div class=\"or\"></div>\n            <button ref=\"revertNode\" class=\"ui button negative revertNode\">${ctx.t(\"Revert\")}</button>\n          `\n              : \"\"\n          }\n        `\n            : \"\"\n        }\n      </div>\n    </div>\n  </div>\n</div>`;\n","import edit from \"./edit\";\nimport view from \"./view\";\n\nexport default {\n  treeView: {\n    form: view,\n  },\n  treeEdit: {\n    form: edit,\n  },\n};\n","export default (\n  ctx: Record<string, any>,\n) => `<div class=\"${ctx.classes} ui form\" ref=\"webform\" novalidate>${ctx.children}</div>\n`;\n","import builder from \"./builder\";\nimport value from \"./form\";\n\nexport default { form: value };\n","export default (ctx: Record<string, any>) => `<div class=\"ui secondary segment\">\n  <div class=\"content\" ref=\"${ctx.nestedKey}\">\n    ${ctx.children}\n  </div>\n</div>\n`;\n","import value from \"./form\";\n\nexport default { form: value };\n","interface WizardFormContext {\n  className: string;\n  wizardHeaderType: string;\n  content: string;\n}\n\nexport default (ctx: WizardFormContext) => `<div class=\"${ctx.className}\">\n  <div style=\"position: relative;\">\n    ${\n      ctx.wizardHeaderType === \"wizardHeaderVertical\"\n        ? `<div class=\"ui stackable grid\">\n            <div class=\"three wide computer sixteen wide tablet sixteen wide mobile column\">\n              <div class=\"ui vertical steps\">\n                ${ctx.content}\n              </div>\n            </div>\n            <div class=\"thirteen wide computer sixteen wide tablet sixteen wide mobile column\">\n              <div class=\"ui segment\">\n                <div class=\"ui form\">\n                  ${ctx.content}\n                </div>\n              </div>\n            </div>\n          </div>`\n        : `<div class=\"ui segment\">\n            <div class=\"ui form\">\n              ${ctx.content}\n            </div>\n          </div>`\n    }\n  </div>\n</div>`;\n","import builder from \"./builder\";\nimport value from \"./form\";\n\nexport default { form: value };\n","interface WizardHeaderFormContext {\n  panels: Array<{\n    title: string;\n    tooltip: string;\n  }>;\n  currentPage: number;\n  wizardKey: string;\n}\n\nexport default (ctx: WizardHeaderFormContext) => `<div class=\"ui steps\">\n  ${ctx.panels\n    .map(\n      (panel, index) => `\n    <a class=\"${ctx.currentPage === index ? \" active\" : \"\"} step\" ref=\"${ctx.wizardKey}-link\">\n      <div class=\"content\">\n        <div class=\"title\">\n          ${panel.title}\n        </div>\n        <div class=\"description\">\n          ${panel.tooltip}\n        </div>\n      </div>\n    </a>\n  `,\n    )\n    .join(\"\")}\n</div>`;\n","import value from \"./form\";\nexport default { form: value };\n","interface WizardHeaderClassicFormContext {\n  panels: Array<{\n    title: string;\n    tooltip: string;\n  }>;\n  currentPage: number;\n  wizardKey: string;\n}\n\nexport default (\n  ctx: WizardHeaderClassicFormContext,\n) => `<div class=\"ui stackable grid\" style=\"border-bottom:0;\">\n  ${ctx.panels\n    .map(\n      (panel, index) => `\n    <div class=\"classic-pagination-page four wide computer eight wide tablet sixteen wide mobile column\n      ${ctx.currentPage < index ? \" disabled\" : \"\"}\n      ${ctx.currentPage === index ? \" active\" : \"\"}\"\n      ref=\"${ctx.wizardKey}-link\">\n      <div class=\"content\">\n        <div class=\"title\">\n          ${panel.title}\n        </div>\n        <div class=\"description\">\n          ${panel.tooltip}\n        </div>\n      </div>\n    </div>\n  `,\n    )\n    .join(\"\")}\n</div>`;\n","import value from \"./form\";\nexport default { form: value };\n","export default (ctx: Record<string, any>) => {\n  const panels = ctx.panels.map(\n    (panel: any, index: number) => `\n    <li class=\" item page-item${ctx.currentPage === index ? \" active\" : \"\"}\" style=\"cursor: pointer;\">\n      <span class=\"page-link\" ref=\"${ctx.wizardKey}-link\" style=\"margin-left: 0px;\">\n        ${ctx.t(panel.title, { _userInput: true })}\n        ${\n          panel.tooltip && ctx.currentPage === index\n            ? `<i ref=\"${ctx.wizardKey}-tooltip\" class=\"${ctx.iconClass(\"question-sign\")} text-muted\" data-tooltip=\"${panel.tooltip}\"></i>`\n            : \"\"\n        }\n      </span>\n    </li>\n  `,\n  );\n  return `<nav aria-label=\"navigation\" id=\"${ctx.wizardKey}-header\">\n  <ul class=\"ui vertical fluid tabular menu\">\n    ${panels}\n  </ul>\n</nav>`;\n};\n","import value from \"./form\";\nexport default { form: value };\n","export default (ctx: Record<string, any>) => {\n  const cancelButton = ctx.buttons.cancel\n    ? `<div class=\"item\">\n    <button class=\"ui button secondary btn-wizard-nav-cancel\" ref=\"${ctx.wizardKey}-cancel\">${ctx.t(\"cancel\")}</button>\n  </div>`\n    : \"\";\n  const previousButton = ctx.buttons.previous\n    ? `<div class=\"item\">\n    <button class=\"ui button primary btn-wizard-nav-previous\" ref=\"${ctx.wizardKey}-previous\">${ctx.t(\"previous\")}</button>\n  </div>`\n    : \"\";\n  const nextButton = ctx.buttons.next\n    ? `<div class=\"item\">\n    <button class=\"ui button primary btn-wizard-nav-next\" ref=\"${ctx.wizardKey}-next\">${ctx.t(\"next\")}</button>\n  </div>`\n    : \"\";\n  const submitButton = ctx.buttons.submit\n    ? `<div class=\"item\">\n    <button class=\"ui button primary btn-wizard-nav-submit\" ref=\"${ctx.wizardKey}-submit\">${ctx.t(\"submit\")}</button>\n  </div>`\n    : \"\";\n  return `<div class=\"ui horizontal list\" id=\"${ctx.wizardKey}-nav\">\n  ${cancelButton}\n  ${previousButton}\n  ${nextButton}\n  ${submitButton}\n  </div>`;\n};\n","import value from \"./form\";\nexport default { form: value };\n","export interface AlertTemplateContext {\n  attrs: Record<string, string>;\n  message: string;\n}\n\nexport default (ctx: AlertTemplateContext) => {\n  let attrs = \"\";\n  for (const attr in ctx.attrs) {\n    if (attr === \"class\") {\n      attrs += `${attr}=\"ui message ${ctx.attrs[attr]}\" `;\n    } else {\n      attrs += `${attr}=\"${ctx.attrs[attr]}\" `;\n    }\n  }\n  return `<div ${attrs.trim()}>${ctx.message}</div>`;\n};\n","import form from \"./form\";\n\nexport default { form };\n","import { TemplateContext } from \"../types\";\n\nexport default (_ctx: TemplateContext) => {\n  return \"\";\n};\n","import value from \"./form\";\n\nexport default { form: value };\n","import builder from \"./builder\";\nimport builderComponent from \"./builderComponent\";\nimport builderComponents from \"./builderComponents\";\nimport builderEditForm from \"./builderEditForm\";\nimport builderPlaceholder from \"./builderPlaceholder\";\nimport builderSidebar from \"./builderSidebar\";\nimport builderSidebarGroup from \"./builderSidebarGroup\";\nimport builderWizard from \"./builderWizard\";\nimport button from \"./button\";\nimport checkbox from \"./checkbox\";\nimport columns from \"./columns\";\nimport component from \"./component\";\nimport cssClasses from \"./cssClasses\";\nimport datagrid from \"./datagrid\";\nimport day from \"./day\";\nimport editgrid from \"./editgrid\";\nimport field from \"./field\";\nimport fieldset from \"./fieldset\";\nimport file from \"./file\";\nimport icon from \"./icon\";\nimport iconClass from \"./iconClass\";\nimport input from \"./input\";\nimport label from \"./label\";\nimport loader from \"./loader\";\nimport loading from \"./loading\";\nimport message from \"./message\";\nimport multiValueRow from \"./multiValueRow\";\nimport multiValueTable from \"./multiValueTable\";\nimport panel from \"./panel\";\nimport radio from \"./radio\";\nimport resourceAdd from \"./resourceAdd\";\nimport select from \"./select\";\nimport selectOption from \"./selectOption\";\nimport signature from \"./signature\";\nimport survey from \"./survey\";\nimport tab from \"./tab\";\nimport table from \"./table\";\nimport tree from \"./tree\";\nimport treePartials from \"./tree/partials\";\nimport webform from \"./webform\";\nimport well from \"./well\";\nimport wizard from \"./wizard\";\nimport wizardHeader from \"./wizardHeader\";\nimport wizardHeaderClassic from \"./wizardHeaderClassic\";\nimport wizardHeaderVertical from \"./wizardHeaderVertical\";\nimport wizardNav from \"./wizardNav\";\nimport alert from \"./alert\";\nimport errorsList from \"./errorsList\";\n\nconst columnsMap: Record<string, string> = {\n  1: \"one\",\n  2: \"two\",\n  3: \"three\",\n  4: \"four\",\n  5: \"five\",\n  6: \"six\",\n  7: \"seven\",\n  8: \"eight\",\n  9: \"nine\",\n  10: \"ten\",\n  11: \"eleven\",\n  12: \"twelve\",\n  13: \"thirteen\",\n  14: \"fourteen\",\n  15: \"fifteen\",\n  16: \"sixteen\",\n};\n\ninterface GoFormsTemplate {\n  transform: (type: string, text: string | number) => string;\n  defaultIconset: string;\n  iconClass: (iconset: string, name: string, spinning?: boolean) => string;\n  cssClasses: Record<string, string>;\n  builder: unknown;\n  builderComponent: unknown;\n  builderComponents: unknown;\n  builderEditForm: unknown;\n  builderPlaceholder: unknown;\n  builderSidebar: unknown;\n  builderSidebarGroup: unknown;\n  builderWizard: unknown;\n  button: unknown;\n  checkbox: unknown;\n  columns: unknown;\n  component: unknown;\n  datagrid: unknown;\n  day: unknown;\n  editgrid: unknown;\n  field: unknown;\n  fieldset: unknown;\n  file: unknown;\n  icon: unknown;\n  input: unknown;\n  label: unknown;\n  loader: unknown;\n  loading: unknown;\n  message: unknown;\n  multiValueRow: unknown;\n  multiValueTable: unknown;\n  panel: unknown;\n  radio: unknown;\n  resourceAdd: unknown;\n  select: unknown;\n  selectOption: unknown;\n  signature: unknown;\n  survey: unknown;\n  tab: unknown;\n  tree: unknown;\n  treeEdit: unknown;\n  treeView: unknown;\n  table: unknown;\n  webform: unknown;\n  well: unknown;\n  wizard: unknown;\n  wizardHeader: unknown;\n  wizardHeaderClassic: unknown;\n  wizardHeaderVertical: unknown;\n  wizardNav: unknown;\n  alert: unknown;\n  errorsList: unknown;\n}\n\nconst goforms: GoFormsTemplate = {\n  transform(type: string, text: string | number): string {\n    if (!text) {\n      return text as string;\n    }\n    switch (type) {\n      case \"columns\":\n        return Object.prototype.hasOwnProperty.call(columnsMap, text.toString())\n          ? columnsMap[text.toString()]\n          : text.toString();\n      case \"class\":\n        return Object.prototype.hasOwnProperty.call(\n          this.cssClasses,\n          text.toString(),\n        )\n          ? this.cssClasses[text.toString()]\n          : text.toString();\n    }\n    return text.toString();\n  },\n  defaultIconset: \"icon\",\n  iconClass,\n  cssClasses,\n  builder,\n  builderComponent,\n  builderComponents,\n  builderEditForm,\n  builderPlaceholder,\n  builderSidebar,\n  builderSidebarGroup,\n  builderWizard,\n  button,\n  checkbox,\n  columns,\n  component,\n  datagrid,\n  day,\n  editgrid,\n  field,\n  fieldset,\n  file,\n  icon,\n  input,\n  label,\n  loader,\n  loading,\n  message,\n  multiValueRow,\n  multiValueTable,\n  panel,\n  radio,\n  resourceAdd,\n  select,\n  selectOption,\n  signature,\n  survey,\n  tab,\n  tree,\n  ...treePartials,\n  table,\n  webform,\n  well,\n  wizard,\n  wizardHeader,\n  wizardHeaderClassic,\n  wizardHeaderVertical,\n  wizardNav,\n  alert,\n  errorsList,\n};\n\nexport default goforms;\n","import { Components } from \"@formio/js\";\n\nexport class CustomTextField extends Components.components.textfield {\n  static schema() {\n    return Components.components.textfield.schema();\n  }\n\n  static get builderInfo() {\n    return {\n      title: \"Custom Text Field\",\n      group: \"basic\",\n      icon: \"fa fa-font\",\n      weight: 0,\n      documentation: \"https://formio.github.io/formio.js/app/examples/customcomponents.html\",\n      schema: CustomTextField.schema(),\n    };\n  }\n\n  render() {\n    // You can override the render method to customize the component's appearance\n    return super.render();\n  }\n\n  // Add custom methods and properties here\n} ","import { Components } from \"@formio/js\";\nimport { CustomTextField } from \"./CustomTextField\";\n\n// Register custom components\nexport const registerCustomComponents = () => {\n  Components.addComponent(\"customtextfield\", CustomTextField);\n};\n\n// Export the components for use in the main application\nexport { Components, CustomTextField };\n","import templates from \"./templates\";\nimport type { Templates } from \"./templates\";\n\ninterface GoForms {\n  framework: string;\n  templates: Templates;\n}\n\nconst goforms: GoForms = {\n  framework: \"goforms\",\n  templates,\n};\n\nexport default goforms;\nexport { goforms };\n\n// For CJS consumers\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = goforms;\n  module.exports.default = goforms;\n}\n\nexport * from \"./components\";\n"],"names":["form$1","ctx","builder","form","value$G","iconClass","html","builderComponent","value","value$F","builderComponents","value$E","builderEditForm","value$D","builderPlaceholder","value$C","group","builderSidebar","value$B","t","subgroups","components","componentKey","component","builderSidebarGroup","value$A","pages","self","sidebar","pageBreadcrumbs","page","pageIndex","builderWizard","value$z","input","transform","attrs","attr","html$9","_ctx","button","value$y","html$8","checkbox","value$x","column","index","columns","value$w","cssClasses","value$v","rows","datagridKey","hasAddButton","hasBottomSubmit","hasHeader","hasExtraColumn","addButtonLocation","addButton","numColumns","tableStyle","header","col","body","row","footer","html$7","datagrid","value$u","day","value$t","html$6","editgrid","value$s","align","field","value$r","fieldset","value$q","file","value$p","icon","iconset","name","spinning","icons","value$o","html$5","value$n","label","value$m","loader","value$l","loading","value$k","message","value$j","multiValueRow","value$i","multiValueTable","value$h","panel","value$g","item","html$4","radio","value$f","resourceAdd","value$e","_a","_b","html$3","select","value$d","html$2","selectOption","value$c","html$1","signature","value$b","question","survey","value$a","tab","flat","value$9","rowIndex","cell","cellIndex","table","value$8","tree","edit","view","treePartials","value$7","webform","value$6","well","value$5","wizard","value$4","wizardHeader","value$3","wizardHeaderClassic","value$2","panels","wizardHeaderVertical","value$1","cancelButton","previousButton","nextButton","submitButton","wizardNav","alert","errorsList","columnsMap","goforms","type","text","CustomTextField","Components","registerCustomComponents","templates"],"mappings":"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"}